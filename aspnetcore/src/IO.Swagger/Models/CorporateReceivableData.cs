/*
 * Onyx Domain API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CorporateReceivableData : IEquatable<CorporateReceivableData>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets DateEx
        /// </summary>

        [DataMember(Name="dateEx")]
        public DateTime? DateEx { get; set; }

        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>

        [DataMember(Name="tradeDate")]
        public DateTime? TradeDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentValue
        /// </summary>

        [DataMember(Name="paymentValue")]
        public double? PaymentValue { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>

        [DataMember(Name="security")]
        public string Security { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [DataMember(Name="account")]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets CorporateActionTypeId
        /// </summary>

        [DataMember(Name="corporateActionTypeId")]
        public int? CorporateActionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets FundId
        /// </summary>

        [DataMember(Name="fundId")]
        public int? FundId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateReceivableData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateEx: ").Append(DateEx).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  PaymentValue: ").Append(PaymentValue).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CorporateActionTypeId: ").Append(CorporateActionTypeId).Append("\n");
            sb.Append("  FundId: ").Append(FundId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CorporateReceivableData)obj);
        }

        /// <summary>
        /// Returns true if CorporateReceivableData instances are equal
        /// </summary>
        /// <param name="other">Instance of CorporateReceivableData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateReceivableData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    DateEx == other.DateEx ||
                    DateEx != null &&
                    DateEx.Equals(other.DateEx)
                ) && 
                (
                    TradeDate == other.TradeDate ||
                    TradeDate != null &&
                    TradeDate.Equals(other.TradeDate)
                ) && 
                (
                    PaymentValue == other.PaymentValue ||
                    PaymentValue != null &&
                    PaymentValue.Equals(other.PaymentValue)
                ) && 
                (
                    Security == other.Security ||
                    Security != null &&
                    Security.Equals(other.Security)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    CorporateActionTypeId == other.CorporateActionTypeId ||
                    CorporateActionTypeId != null &&
                    CorporateActionTypeId.Equals(other.CorporateActionTypeId)
                ) && 
                (
                    FundId == other.FundId ||
                    FundId != null &&
                    FundId.Equals(other.FundId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (DateEx != null)
                    hashCode = hashCode * 59 + DateEx.GetHashCode();
                    if (TradeDate != null)
                    hashCode = hashCode * 59 + TradeDate.GetHashCode();
                    if (PaymentValue != null)
                    hashCode = hashCode * 59 + PaymentValue.GetHashCode();
                    if (Security != null)
                    hashCode = hashCode * 59 + Security.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (CorporateActionTypeId != null)
                    hashCode = hashCode * 59 + CorporateActionTypeId.GetHashCode();
                    if (FundId != null)
                    hashCode = hashCode * 59 + FundId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CorporateReceivableData left, CorporateReceivableData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CorporateReceivableData left, CorporateReceivableData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
