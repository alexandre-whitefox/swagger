/*
 * Onyx Integrations
 *
 * Onyx APIs for integrations
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EmailParameters : IEquatable<EmailParameters>
    { 
        /// <summary>
        /// Gets or Sets LogId
        /// </summary>
        [DataMember(Name="logId")]
        public Guid? LogId { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to")]
        public List<EmailAddress> To { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFrom
        /// </summary>
        [DataMember(Name="displayFrom")]
        public string DisplayFrom { get; set; }

        /// <summary>
        /// Gets or Sets EmailFrom
        /// </summary>
        [DataMember(Name="emailFrom")]
        public string EmailFrom { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets HtmlContent
        /// </summary>
        [DataMember(Name="htmlContent")]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDescription
        /// </summary>
        [DataMember(Name="additionalDescription")]
        public string AdditionalDescription { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionId
        /// </summary>
        [DataMember(Name="definitionId")]
        public int? DefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentName
        /// </summary>
        [DataMember(Name="attachmentName")]
        public string AttachmentName { get; set; }

        /// <summary>
        /// Gets or Sets XstlTemplates
        /// </summary>
        [DataMember(Name="xstlTemplates")]
        public bool? XstlTemplates { get; set; }

        /// <summary>
        /// Gets or Sets XmlData
        /// </summary>
        [DataMember(Name="xmlData")]
        public string XmlData { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="processId")]
        public string ProcessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailParameters {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  DisplayFrom: ").Append(DisplayFrom).Append("\n");
            sb.Append("  EmailFrom: ").Append(EmailFrom).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  AdditionalDescription: ").Append(AdditionalDescription).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  AttachmentName: ").Append(AttachmentName).Append("\n");
            sb.Append("  XstlTemplates: ").Append(XstlTemplates).Append("\n");
            sb.Append("  XmlData: ").Append(XmlData).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmailParameters)obj);
        }

        /// <summary>
        /// Returns true if EmailParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of EmailParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LogId == other.LogId ||
                    LogId != null &&
                    LogId.Equals(other.LogId)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.SequenceEqual(other.To)
                ) && 
                (
                    DisplayFrom == other.DisplayFrom ||
                    DisplayFrom != null &&
                    DisplayFrom.Equals(other.DisplayFrom)
                ) && 
                (
                    EmailFrom == other.EmailFrom ||
                    EmailFrom != null &&
                    EmailFrom.Equals(other.EmailFrom)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    HtmlContent == other.HtmlContent ||
                    HtmlContent != null &&
                    HtmlContent.Equals(other.HtmlContent)
                ) && 
                (
                    AdditionalDescription == other.AdditionalDescription ||
                    AdditionalDescription != null &&
                    AdditionalDescription.Equals(other.AdditionalDescription)
                ) && 
                (
                    DefinitionId == other.DefinitionId ||
                    DefinitionId != null &&
                    DefinitionId.Equals(other.DefinitionId)
                ) && 
                (
                    AttachmentName == other.AttachmentName ||
                    AttachmentName != null &&
                    AttachmentName.Equals(other.AttachmentName)
                ) && 
                (
                    XstlTemplates == other.XstlTemplates ||
                    XstlTemplates != null &&
                    XstlTemplates.Equals(other.XstlTemplates)
                ) && 
                (
                    XmlData == other.XmlData ||
                    XmlData != null &&
                    XmlData.Equals(other.XmlData)
                ) && 
                (
                    ProcessId == other.ProcessId ||
                    ProcessId != null &&
                    ProcessId.Equals(other.ProcessId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LogId != null)
                    hashCode = hashCode * 59 + LogId.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (DisplayFrom != null)
                    hashCode = hashCode * 59 + DisplayFrom.GetHashCode();
                    if (EmailFrom != null)
                    hashCode = hashCode * 59 + EmailFrom.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (HtmlContent != null)
                    hashCode = hashCode * 59 + HtmlContent.GetHashCode();
                    if (AdditionalDescription != null)
                    hashCode = hashCode * 59 + AdditionalDescription.GetHashCode();
                    if (DefinitionId != null)
                    hashCode = hashCode * 59 + DefinitionId.GetHashCode();
                    if (AttachmentName != null)
                    hashCode = hashCode * 59 + AttachmentName.GetHashCode();
                    if (XstlTemplates != null)
                    hashCode = hashCode * 59 + XstlTemplates.GetHashCode();
                    if (XmlData != null)
                    hashCode = hashCode * 59 + XmlData.GetHashCode();
                    if (ProcessId != null)
                    hashCode = hashCode * 59 + ProcessId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmailParameters left, EmailParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmailParameters left, EmailParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
