/*
 * Onyx Domain API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Version : IEquatable<Version>
    { 
        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name="major")]
        public int? Major { get; private set; }

        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name="minor")]
        public int? Minor { get; private set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build")]
        public int? Build { get; private set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision")]
        public int? Revision { get; private set; }

        /// <summary>
        /// Gets or Sets MajorRevision
        /// </summary>
        [DataMember(Name="majorRevision")]
        public int? MajorRevision { get; private set; }

        /// <summary>
        /// Gets or Sets MinorRevision
        /// </summary>
        [DataMember(Name="minorRevision")]
        public int? MinorRevision { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Version {\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  MajorRevision: ").Append(MajorRevision).Append("\n");
            sb.Append("  MinorRevision: ").Append(MinorRevision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Version)obj);
        }

        /// <summary>
        /// Returns true if Version instances are equal
        /// </summary>
        /// <param name="other">Instance of Version to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Version other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Major == other.Major ||
                    Major != null &&
                    Major.Equals(other.Major)
                ) && 
                (
                    Minor == other.Minor ||
                    Minor != null &&
                    Minor.Equals(other.Minor)
                ) && 
                (
                    Build == other.Build ||
                    Build != null &&
                    Build.Equals(other.Build)
                ) && 
                (
                    Revision == other.Revision ||
                    Revision != null &&
                    Revision.Equals(other.Revision)
                ) && 
                (
                    MajorRevision == other.MajorRevision ||
                    MajorRevision != null &&
                    MajorRevision.Equals(other.MajorRevision)
                ) && 
                (
                    MinorRevision == other.MinorRevision ||
                    MinorRevision != null &&
                    MinorRevision.Equals(other.MinorRevision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Major != null)
                    hashCode = hashCode * 59 + Major.GetHashCode();
                    if (Minor != null)
                    hashCode = hashCode * 59 + Minor.GetHashCode();
                    if (Build != null)
                    hashCode = hashCode * 59 + Build.GetHashCode();
                    if (Revision != null)
                    hashCode = hashCode * 59 + Revision.GetHashCode();
                    if (MajorRevision != null)
                    hashCode = hashCode * 59 + MajorRevision.GetHashCode();
                    if (MinorRevision != null)
                    hashCode = hashCode * 59 + MinorRevision.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Version left, Version right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Version left, Version right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
