/*
 * Onyx Domain API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HttpResponseMessage : IEquatable<HttpResponseMessage>
    { 
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version")]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content")]
        public HttpContent Content { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode")]
        public HttpStatusCode StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonPhrase
        /// </summary>
        [DataMember(Name="reasonPhrase")]
        public string ReasonPhrase { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers")]
        public List<StringStringIEnumerableKeyValuePair> Headers { get; private set; }

        /// <summary>
        /// Gets or Sets TrailingHeaders
        /// </summary>
        [DataMember(Name="trailingHeaders")]
        public List<StringStringIEnumerableKeyValuePair> TrailingHeaders { get; private set; }

        /// <summary>
        /// Gets or Sets RequestMessage
        /// </summary>
        [DataMember(Name="requestMessage")]
        public HttpRequestMessage RequestMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsSuccessStatusCode
        /// </summary>
        [DataMember(Name="isSuccessStatusCode")]
        public bool? IsSuccessStatusCode { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpResponseMessage {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ReasonPhrase: ").Append(ReasonPhrase).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  TrailingHeaders: ").Append(TrailingHeaders).Append("\n");
            sb.Append("  RequestMessage: ").Append(RequestMessage).Append("\n");
            sb.Append("  IsSuccessStatusCode: ").Append(IsSuccessStatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HttpResponseMessage)obj);
        }

        /// <summary>
        /// Returns true if HttpResponseMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of HttpResponseMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpResponseMessage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    ReasonPhrase == other.ReasonPhrase ||
                    ReasonPhrase != null &&
                    ReasonPhrase.Equals(other.ReasonPhrase)
                ) && 
                (
                    Headers == other.Headers ||
                    Headers != null &&
                    Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    TrailingHeaders == other.TrailingHeaders ||
                    TrailingHeaders != null &&
                    TrailingHeaders.SequenceEqual(other.TrailingHeaders)
                ) && 
                (
                    RequestMessage == other.RequestMessage ||
                    RequestMessage != null &&
                    RequestMessage.Equals(other.RequestMessage)
                ) && 
                (
                    IsSuccessStatusCode == other.IsSuccessStatusCode ||
                    IsSuccessStatusCode != null &&
                    IsSuccessStatusCode.Equals(other.IsSuccessStatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (ReasonPhrase != null)
                    hashCode = hashCode * 59 + ReasonPhrase.GetHashCode();
                    if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                    if (TrailingHeaders != null)
                    hashCode = hashCode * 59 + TrailingHeaders.GetHashCode();
                    if (RequestMessage != null)
                    hashCode = hashCode * 59 + RequestMessage.GetHashCode();
                    if (IsSuccessStatusCode != null)
                    hashCode = hashCode * 59 + IsSuccessStatusCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HttpResponseMessage left, HttpResponseMessage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HttpResponseMessage left, HttpResponseMessage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
