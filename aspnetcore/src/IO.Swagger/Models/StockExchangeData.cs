/*
 * Onyx Domain API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StockExchangeData : IEquatable<StockExchangeData>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>

        [DataMember(Name="fee")]
        public double? Fee { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPlace
        /// </summary>

        [DataMember(Name="settlementPlace")]
        public string SettlementPlace { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>

        [DataMember(Name="countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets HolidayType
        /// </summary>

        [DataMember(Name="holidayType")]
        public string HolidayType { get; set; }

        /// <summary>
        /// Gets or Sets HolidayTypeId
        /// </summary>

        [DataMember(Name="holidayTypeId")]
        public int? HolidayTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockExchangeData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  SettlementPlace: ").Append(SettlementPlace).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  HolidayType: ").Append(HolidayType).Append("\n");
            sb.Append("  HolidayTypeId: ").Append(HolidayTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StockExchangeData)obj);
        }

        /// <summary>
        /// Returns true if StockExchangeData instances are equal
        /// </summary>
        /// <param name="other">Instance of StockExchangeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockExchangeData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.Equals(other.Fee)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    SettlementPlace == other.SettlementPlace ||
                    SettlementPlace != null &&
                    SettlementPlace.Equals(other.SettlementPlace)
                ) && 
                (
                    CountryId == other.CountryId ||
                    CountryId != null &&
                    CountryId.Equals(other.CountryId)
                ) && 
                (
                    HolidayType == other.HolidayType ||
                    HolidayType != null &&
                    HolidayType.Equals(other.HolidayType)
                ) && 
                (
                    HolidayTypeId == other.HolidayTypeId ||
                    HolidayTypeId != null &&
                    HolidayTypeId.Equals(other.HolidayTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (SettlementPlace != null)
                    hashCode = hashCode * 59 + SettlementPlace.GetHashCode();
                    if (CountryId != null)
                    hashCode = hashCode * 59 + CountryId.GetHashCode();
                    if (HolidayType != null)
                    hashCode = hashCode * 59 + HolidayType.GetHashCode();
                    if (HolidayTypeId != null)
                    hashCode = hashCode * 59 + HolidayTypeId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StockExchangeData left, StockExchangeData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StockExchangeData left, StockExchangeData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
